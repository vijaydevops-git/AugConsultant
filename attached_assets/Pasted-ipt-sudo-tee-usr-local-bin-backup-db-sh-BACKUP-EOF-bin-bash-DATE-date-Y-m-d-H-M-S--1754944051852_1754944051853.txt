ipt..."
sudo tee /usr/local/bin/backup-db.sh << 'BACKUP_EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/home/ubuntu/backups"
mkdir -p $BACKUP_DIR

# Create database backup
PGPASSWORD="$DB_PASSWORD" pg_dump -h localhost -U tracker_user consultant_tracker > $BACKUP_DIR/backup_$DATE.sql

# Keep only last 7 days of backups
find $BACKUP_DIR -name "backup_*.sql" -mtime +7 -delete

echo "Database backup completed: backup_$DATE.sql"
BACKUP_EOF

sudo chmod +x /usr/local/bin/backup-db.sh

# Schedule daily backups at 2 AM
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/backup-db.sh") | crontab -

echo "🎯 Creating monitoring script..."
tee /home/ubuntu/monitor.sh << 'MONITOR_EOF'
#!/bin/bash

echo "=== Application Status ==="
pm2 status

echo -e "\n=== Service Status ==="
sudo systemctl status nginx --no-pager -l
sudo systemctl status postgresql --no-pager -l

echo -e "\n=== Disk Usage ==="
df -h

echo -e "\n=== Memory Usage ==="
free -m

echo -e "\n=== Recent Application Logs ==="
pm2 logs consultant-tracker --lines 10 --nostream

echo -e "\n=== Application URL ==="
echo "http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
MONITOR_EOF

chmod +x /home/ubuntu/monitor.sh

echo "✅ Deployment completed successfully!"
echo ""
echo "🎯 Application Details:"
echo "   URL: $APP_URL"
echo "   Database: PostgreSQL running on localhost:5432"
echo "   Files stored in: S3 bucket '$S3_BUCKET'"
echo "   Email reports from: $SES_EMAIL"
echo ""
#!/bin/bash

# SVATech Consultant Tracker - One-Click Deployment Script
# This script automates the complete deployment process

set -e

echo "🚀 Starting SVATech Consultant Tracker deployment..."

# Configuration (update these values)
REPO_URL="https://github.com/vijaydevops-git/AugConsultant.git"
DOMAIN_NAME=""  # Leave empty for HTTP access via EC2 IP
DB_PASSWORD="MonDad@2022!"  # Password for local PostgreSQL on EC2
#AWS_ACCESS_KEY="your_aws_access_key"
#AWS_SECRET_KEY="your_aws_secret_key"
#AWS_REGION="us-east-1"
S3_BUCKET="consultant-tracker-frontend-app"
SES_EMAIL="sre.aibot@gmail.com"
RECIPIENT_EMAILS="sre.aibot@gmail.com"

echo "📦 Updating system packages..."
sudo apt update && sudo apt upgrade -y
"~/AugConsultant/deploy.sh" 306L, 9686B                                                               11,1          Top
#!/bin/bash
# Configuration (update these values)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

echo "⚡ Installing PM2 process manager..."
sudo apt install -y nginx certbot python3-certbot-nginx
sudo apt install -y git curl wget unzip

# Database Configuration
SES_SENDER_EMAIL=$SES_EMAIL

NODE_ENV=production
# REPLIT_CLIENT_SECRET=your_replit_client_secret

echo "🌐 Configuring Nginx reverse proxy..."
if [ -n "$DOMAIN_NAME" ]; then
    # Configuration with domain name
    return 301 https://\$server_name\$request_uri;
server {
    listen 443 ssl http2;
    server_name $DOMAIN_NAME www.$DOMAIN_NAME;
        proxy_pass http://localhost:5000;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        add_header Content-Type text/plain;
    }
}
NGINX_EOF
        proxy_set_header Host $host;
    location /health {
        access_log off;
        return 200 "healthy\n";


sudo systemctl restart nginx
sudo ufw allow ssh

sudo systemctl status postgresql --no-pager -l

echo -e "\n=== Memory Usage ==="
echo -e "\n=== Recent Application Logs ==="
echo "http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
MONITOR_EOF

echo "✅ Deployment completed successfully!"
echo ""
echo "🎯 Application Details:"
echo "   URL: $APP_URL"
echo "   Email reports from: $SES_EMAIL"
echo "📊 Management Commands:"
echo "   Email reports from: $SES_EMAIL"
echo ""
echo "📊 Management Commands:"
echo "   Monitor: ./monitor.sh"
echo "   Logs: pm2 logs consultant-tracker"
echo "   Restart: pm2 restart consultant-tracker"
echo "   Stop: pm2 stop consultant-tracker"
echo "   Backup: sudo /usr/local/bin/backup-db.sh"
echo ""
echo "📅 Automated Features:"
echo "   ✅ Daily email reports at 7:00 PM EST"
echo "   ✅ Weekly email reports every Friday at 7:00 PM EST"
echo "   ✅ Monthly email reports on last day of month at 7:00 PM EST"
echo "   ✅ Daily database backups at 2:00 AM"
echo ""
echo "🔧 Next Steps:"
echo "1. Verify your S3 bucket '$S3_BUCKET' exists and is accessible"
echo "2. Verify your SES email '$SES_EMAIL' is verified in AWS SES console"
echo "3. Test the application by visiting the URL above"
echo "4. Check logs with: pm2 logs consultant-tracker"
echo ""
echo "🚀 Your SVATech Consultant Tracker is now live!"
"~/AugConsultant/deploy.sh" 301L, 9738B                                                               296,54        Bot
echo "   Email reports from: $SES_EMAIL"
echo "   Monitor: ./monitor.sh"
echo "   Logs: pm2 logs consultant-tracker"
echo "   Restart: pm2 restart consultant-tracker"
echo "   Stop: pm2 stop consultant-tracker"
echo "   Backup: sudo /usr/local/bin/backup-db.sh"
echo ""
echo "📅 Automated Features:"
echo "   ✅ Daily email reports at 7:00 PM EST"
echo "   ✅ Weekly email reports every Friday at 7:00 PM EST"
echo "   ✅ Monthly email reports on last day of month at 7:00 PM EST"
echo "   ✅ Daily database backups at 2:00 AM"
echo ""
echo "🔧 Next Steps:"
echo "1. Verify your S3 bucket '$S3_BUCKET' exists and is accessible"
echo "2. Verify your SES email '$SES_EMAIL' is verified in AWS SES console"
echo "3. Test the application by visiting the URL above"
echo "4. Check logs with: pm2 logs consultant-tracker"
echo ""
echo "🚀 Your SVATech Consultant Tracker is now live!"
MONITOR_EOF
ubuntu@ip-100-20-10-123:~/AugConsultant$ vi /home/ubuntu/AugConsultant/deploy.sh
ubuntu@ip-100-20-10-123:~/AugConsultant$ vi /home/ubuntu/AugConsultant/deploy.sh
ubuntu@ip-100-20-10-123:~/AugConsultant$ cat /home/ubuntu/AugConsultant/deploy.sh
#!/bin/bash

# SVATech Consultant Tracker - One-Click Deployment Script
# This script automates the complete deployment process

set -e

echo "🚀 Starting SVATech Consultant Tracker deployment..."

# Configuration (update these values)
DOMAIN_NAME=""  # Leave empty for HTTP access via EC2 IP
DB_PASSWORD="MonDad@2022!"  # Password for local PostgreSQL on EC2
AWS_REGION="us-east-1"
S3_BUCKET="consultant-tracker-frontend-app"
SES_EMAIL="sre.aibot@gmail.com"
RECIPIENT_EMAILS="sre.aibot@gmail.com"

echo "📦 Updating system packages..."
sudo apt update && sudo apt upgrade -y

echo "📱 Installing Node.js 20..."
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

echo "🗄️  Installing PostgreSQL..."
sudo apt install -y postgresql postgresql-contrib

echo "⚡ Installing PM2 process manager..."
sudo npm install -g pm2

echo "🌐 Installing Nginx and Certbot..."
sudo apt install -y nginx certbot python3-certbot-nginx

echo "📋 Installing additional tools..."
sudo apt install -y git curl wget unzip

echo "📂 Using existing application files..."
cd /home/ubuntu/AugConsultant

echo "📦 Installing application dependencies..."
npm install

echo "🗄️  Configuring PostgreSQL database..."
# Create database if it doesn't exist
sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = 'consultant_tracker'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE consultant_tracker;"

# Create user if it doesn't exist
sudo -u postgres psql -c "SELECT 1 FROM pg_roles WHERE rolname = 'tracker_user'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER tracker_user WITH PASSWORD '$DB_PASSWORD';"

# Grant privileges
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE consultant_tracker TO tracker_user;"
sudo -u postgres psql -d consultant_tracker -c "GRANT ALL ON SCHEMA public TO tracker_user;"

# Configure PostgreSQL for connections
sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/" /etc/postgresql/*/main/postgresql.conf
echo "local   consultant_tracker   tracker_user                    md5" | sudo tee -a /etc/postgresql/*/main/pg_hba.conf

sudo systemctl restart postgresql
sudo systemctl enable postgresql

echo "⚙️  Creating environment configuration..."
cat > .env << EOF
# Database Configuration
DATABASE_URL=postgresql://tracker_user:$DB_PASSWORD@localhost:5432/consultant_tracker

# AWS Configuration (using IAM role, no keys needed)
AWS_REGION=$AWS_REGION

# S3 Configuration
S3_BUCKET_NAME=$S3_BUCKET
S3_REGION=$AWS_REGION

# SES Configuration
SES_REGION=$AWS_REGION
SES_SENDER_EMAIL=$SES_EMAIL

# Email Report Configuration
REPORT_RECIPIENT_EMAILS=$RECIPIENT_EMAILS

# Application Configuration
NODE_ENV=production
PORT=5000

# Optional: Replit Auth (uncomment and configure if needed)
# REPLIT_CLIENT_ID=your_replit_client_id
# REPLIT_CLIENT_SECRET=your_replit_client_secret
# REPLIT_REDIRECT_URI=http://your-domain.com/auth/callback
EOF

echo "🗄️  Running database migrations..."
npm run db:push

echo "🏗️  Building application..."
npm run build

echo "🚀 Starting application with PM2..."
pm2 delete consultant-tracker 2>/dev/null || true
pm2 start npm --name "consultant-tracker" -- start
pm2 save

# Setup PM2 to start on boot
pm2 startup ubuntu -u ubuntu --hp /home/ubuntu
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup ubuntu -u ubuntu --hp /home/ubuntu

echo "🌐 Configuring Nginx reverse proxy..."
if [ -n "$DOMAIN_NAME" ]; then
    # Configuration with domain name
    sudo tee /etc/nginx/sites-available/consultant-tracker << NGINX_EOF
server {
    listen 80;
    server_name $DOMAIN_NAME www.$DOMAIN_NAME;

    # Redirect HTTP to HTTPS
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN_NAME www.$DOMAIN_NAME;

    # SSL configuration will be added by Certbot

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Main application
    location / {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
NGINX_EOF
else
    # Configuration for IP-only access (no HTTPS)
    sudo tee /etc/nginx/sites-available/consultant-tracker << 'NGINX_EOF'
server {
    listen 80;
    server_name _;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Main application
    location / {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
NGINX_EOF
fi



# Enable site and test Nginx
sudo ln -sf /etc/nginx/sites-available/consultant-tracker /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default

# Test and restart Nginx
sudo nginx -t
sudo systemctl restart nginx
sudo systemctl enable nginx

# Setup SSL certificate if domain is provided
if [ -n "$DOMAIN_NAME" ]; then
    echo "🔒 Setting up SSL certificate for $DOMAIN_NAME..."
    echo "⚠️  Make sure your domain $DOMAIN_NAME points to this server's IP address!"
    echo "   You can check with: dig $DOMAIN_NAME"
    echo ""
    read -p "Press Enter when your domain is pointing to this server, or Ctrl+C to skip SSL setup..."

    # Get SSL certificate
    sudo certbot --nginx -d $DOMAIN_NAME -d www.$DOMAIN_NAME --non-interactive --agree-tos --email $SES_EMAIL --redirect

    # Setup automatic renewal
    sudo systemctl enable certbot.timer
    sudo systemctl start certbot.timer

    echo "✅ SSL certificate installed successfully!"
    APP_URL="https://$DOMAIN_NAME"
else
    echo "ℹ️  No domain configured - using HTTP only"
    APP_URL="http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
fi

echo "🔥 Configuring firewall..."
sudo ufw --force enable
sudo ufw allow ssh
sudo ufw allow 'Nginx Full'

echo "📊 Creating backup script..."
sudo tee /usr/local/bin/backup-db.sh << 'BACKUP_EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/home/ubuntu/backups"
mkdir -p $BACKUP_DIR

# Create database backup
PGPASSWORD="MonDad@2022!" pg_dump -h localhost -U tracker_user consultant_tracker > $BACKUP_DIR/backup_$DATE.sql

# Keep only last 7 days of backups
find $BACKUP_DIR -name "backup_*.sql" -mtime +7 -delete

echo "Database backup completed: backup_$DATE.sql"
BACKUP_EOF

sudo chmod +x /usr/local/bin/backup-db.sh

# Schedule daily backups at 2 AM
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/backup-db.sh") | crontab -

echo "🎯 Creating monitoring script..."
tee /home/ubuntu/monitor.sh << 'MONITOR_EOF'
#!/bin/bash

echo "=== Application Status ==="
pm2 status

echo -e "\n=== Service Status ==="
sudo systemctl status nginx --no-pager -l
sudo systemctl status postgresql --no-pager -l

echo -e "\n=== Disk Usage ==="
df -h

echo -e "\n=== Memory Usage ==="
free -m

echo -e "\n=== Recent Application Logs ==="
pm2 logs consultant-tracker --lines 10 --nostream

echo -e "\n=== Application URL ==="
echo "http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
MONITOR_EOF

chmod +x /home/ubuntu/monitor.sh

echo "✅ Deployment completed successfully!"
echo ""
echo "🎯 Application Details:"
echo "   URL: $APP_URL"
echo "   Database: PostgreSQL running on localhost:5432"
echo "   Files stored in: S3 bucket '$S3_BUCKET'"
echo "   Email reports from: $SES_EMAIL"
echo "   Email reports from: $SES_EMAIL"
echo ""
echo "📊 Management Commands:"
echo "   Monitor: ./monitor.sh"
echo "   Logs: pm2 logs consultant-tracker"
echo "   Restart: pm2 restart consultant-tracker"
echo "   Stop: pm2 stop consultant-tracker"
echo "   Backup: sudo /usr/local/bin/backup-db.sh"
echo ""
echo "📅 Automated Features:"
echo "   ✅ Daily email reports at 7:00 PM EST"
echo "   ✅ Weekly email reports every Friday at 7:00 PM EST"
echo "   ✅ Monthly email reports on last day of month at 7:00 PM EST"
echo "   ✅ Daily database backups at 2:00 AM"
echo ""
echo "🔧 Next Steps:"
echo "1. Verify your S3 bucket '$S3_BUCKET' exists and is accessible"
echo "2. Verify your SES email '$SES_EMAIL' is verified in AWS SES console"
echo "3. Test the application by visiting the URL above"
echo "4. Check logs with: pm2 logs consultant-tracker"
echo ""
echo "🚀 Your SVATech Consultant Tracker is now live!"
"~/AugConsultant/deploy.sh" 301L, 9738B                                                               295,23-21     Bot
#!/bin/bash
echo ""
echo "📊 Management Commands:"
echo "   Monitor: ./monitor.sh"
echo "   Logs: pm2 logs consultant-tracker"
echo "   Restart: pm2 restart consultant-tracker"
echo "   Stop: pm2 stop consultant-tracker"
echo "   Backup: sudo /usr/local/bin/backup-db.sh"
echo ""
echo "📅 Automated Features:"
echo "   ✅ Daily email reports at 7:00 PM EST"
echo "   ✅ Weekly email reports every Friday at 7:00 PM EST"
echo "   ✅ Monthly email reports on last day of month at 7:00 PM EST"
echo "   ✅ Daily database backups at 2:00 AM"
echo ""
echo "🔧 Next Steps:"
echo "1. Verify your S3 bucket '$S3_BUCKET' exists and is accessible"
echo "2. Verify your SES email '$SES_EMAIL' is verified in AWS SES console"
echo "3. Test the application by visiting the URL above"
echo "4. Check logs with: pm2 logs consultant-tracker"
echo ""
echo "🚀 Your SVATech Consultant Tracker is now live!"
ubuntu@ip-100-20-10-123:~/AugConsultant$ vi /home/ubuntu/AugConsultant/deploy.sh
ubuntu@ip-100-20-10-123:~/AugConsultant$ sudo ./deploy.sh
🚀 Starting SVATech Consultant Tracker deployment...
📦 Updating system packages...
Hit:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Hit:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease
Hit:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease
Hit:4 http://security.ubuntu.com/ubuntu noble-security InRelease
Hit:5 https://deb.nodesource.com/node_20.x nodistro InRelease
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
Calculating upgrade... Done
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
📱 Installing Node.js 20...
2025-08-11 17:32:40 - Installing pre-requisites
Hit:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Hit:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease
Hit:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease
Hit:4 http://security.ubuntu.com/ubuntu noble-security InRelease
Hit:5 https://deb.nodesource.com/node_20.x nodistro InRelease
Reading package lists... Done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
apt-transport-https is already the newest version (2.8.3).
ca-certificates is already the newest version (20240203).
curl is already the newest version (8.5.0-2ubuntu10.6).
gnupg is already the newest version (2.4.4-2ubuntu17.3).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Hit:1 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble InRelease
Hit:2 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-updates InRelease
Hit:3 http://us-east-1.ec2.archive.ubuntu.com/ubuntu noble-backports InRelease
Hit:4 http://security.ubuntu.com/ubuntu noble-security InRelease
Hit:5 https://deb.nodesource.com/node_20.x nodistro InRelease
Reading package lists... Done
2025-08-11 17:32:47 - Repository configured successfully.
2025-08-11 17:32:47 - To install Node.js, run: apt-get install nodejs -y
2025-08-11 17:32:47 - You can use N|solid Runtime as a node.js alternative
2025-08-11 17:32:47 - To install N|solid Runtime, run: apt-get install nsolid -y

Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
nodejs is already the newest version (20.19.4-1nodesource1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
🗄️  Installing PostgreSQL...
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
postgresql is already the newest version (16+257build1.1).
postgresql-contrib is already the newest version (16+257build1.1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
⚡ Installing PM2 process manager...

changed 135 packages in 20s

13 packages are looking for funding
  run `npm fund` for details
🌐 Installing Nginx and Certbot...
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
nginx is already the newest version (1.24.0-2ubuntu7.4).
certbot is already the newest version (2.9.0-1).
python3-certbot-nginx is already the newest version (2.9.0-1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
📋 Installing additional tools...
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
git is already the newest version (1:2.43.0-1ubuntu7.3).
curl is already the newest version (8.5.0-2ubuntu10.6).
wget is already the newest version (1.21.4-1ubuntu4.1).
unzip is already the newest version (6.0-28ubuntu4.1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
📂 Using existing application files...
📦 Installing application dependencies...
npm warn deprecated @esbuild-kit/esm-loader@2.6.5: Merged into tsx: https://tsx.is
npm warn deprecated @esbuild-kit/core-utils@3.3.2: Merged into tsx: https://tsx.is
npm warn deprecated node-domexception@1.0.0: Use your platform's native DOMException instead

added 757 packages, and audited 758 packages in 44s

89 packages are looking for funding
  run `npm fund` for details

11 vulnerabilities (3 low, 8 moderate)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
🗄️  Configuring PostgreSQL database...
CREATE DATABASE
CREATE ROLE
GRANT
GRANT
local   consultant_tracker   tracker_user                    md5
Synchronizing state of postgresql.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.
Executing: /usr/lib/systemd/systemd-sysv-install enable postgresql
⚙️  Creating environment configuration...
🗄️  Running database migrations...

> rest-express@1.0.0 db:push
> drizzle-kit push

No config path provided, using default 'drizzle.config.ts'
Reading config file '/home/ubuntu/AugConsultant/drizzle.config.ts'
Using 'pg' driver for database querying
[✓] Pulling schema from database...
[✓] Changes applied
🏗️  Building application...

> rest-express@1.0.0 build
> vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

vite v5.4.19 building for production...
transforming (1) index.htmlBrowserslist: browsers data (caniuse-lite) is 10 months old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
✓ 2860 modules transformed.
../dist/public/index.html                     0.88 kB │ gzip:   0.50 kB
../dist/public/assets/index-C_ktgKH4.css     75.65 kB │ gzip:  12.94 kB
../dist/public/assets/index-BoyhOJwk.js   1,057.54 kB │ gzip: 290.14 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 20.96s

  dist/index.js  102.1kb

⚡ Done in 72ms
🚀 Starting application with PM2...

                        -------------

__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____
 _\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___
  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__
   _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___
    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____
     _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________
      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________
       _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_
        _\///______________\///______________\///__\///////////////__


                          Runtime Edition

        PM2 is a Production Process Manager for Node.js applications
                     with a built-in Load Balancer.

                Start and Daemonize any application:
                $ pm2 start app.js

                Load Balance 4 instances of api.js:
                $ pm2 start api.js -i 4

                Monitor in production:
                $ pm2 monitor

                Make pm2 auto-boot at server restart:
                $ pm2 startup

                To go further checkout:
                http://pm2.io/


                        -------------

[PM2] Spawning PM2 daemon with pm2_home=/root/.pm2
[PM2] PM2 Successfully daemonized
[PM2] Starting /usr/bin/npm in fork_mode (1 instance)
[PM2] Done.
┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │
├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤
│ 0  │ consultant-tracker │ fork     │ 0    │ online    │ 0%       │ 29.3mb   │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘
[PM2] Saving current process list...
[PM2] Successfully saved in /root/.pm2/dump.pm2
[PM2] Init System found: systemd
-----------------------------------------------------------
 PM2 detected systemd but you precised ubuntu
 Please verify that your choice is indeed your init system
 If you arent sure, just run : pm2 startup
-----------------------------------------------------------
Platform ubuntu
Template
[Unit]
Description=PM2 process manager
Documentation=https://pm2.keymetrics.io/
After=network.target

[Service]
Type=forking
User=ubuntu
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Environment=PM2_HOME=/home/ubuntu/.pm2
PIDFile=/home/ubuntu/.pm2/pm2.pid
Restart=on-failure

ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all
ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill

[Install]
WantedBy=multi-user.target

Target path
/etc/systemd/system/pm2-ubuntu.service
Command list
[ 'systemctl enable pm2-ubuntu' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-ubuntu.service
[PM2] Making script booting at startup...
[PM2] [-] Executing: systemctl enable pm2-ubuntu...
Created symlink /etc/systemd/system/multi-user.target.wants/pm2-ubuntu.service → /etc/systemd/system/pm2-ubuntu.service.
[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup ubuntu
[PM2] Init System found: systemd
-----------------------------------------------------------
 PM2 detected systemd but you precised ubuntu
 Please verify that your choice is indeed your init system
 If you arent sure, just run : pm2 startup
-----------------------------------------------------------
Platform ubuntu
Template
[Unit]
Description=PM2 process manager
Documentation=https://pm2.keymetrics.io/
After=network.target

[Service]
Type=forking
User=ubuntu
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/usr/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Environment=PM2_HOME=/home/ubuntu/.pm2
PIDFile=/home/ubuntu/.pm2/pm2.pid
Restart=on-failure

ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all
ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill

[Install]
WantedBy=multi-user.target

Target path
/etc/systemd/system/pm2-ubuntu.service
Command list
[ 'systemctl enable pm2-ubuntu' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-ubuntu.service
[PM2] Making script booting at startup...
[PM2] [-] Executing: systemctl enable pm2-ubuntu...
[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup ubuntu
🌐 Configuring Nginx reverse proxy...
server {
    listen 80;
    server_name _;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Main application
    location / {
        proxy_pass http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
Synchronizing state of nginx.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.
Executing: /usr/lib/systemd/systemd-sysv-install enable nginx
ℹ️  No domain configured - using HTTP only
🔥 Configuring firewall...
Firewall is active and enabled on system startup
Rule added
Rule added (v6)
Rule added
Rule added (v6)
📊 Creating backup script...
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/home/ubuntu/backups"
mkdir -p $BACKUP_DIR

# Create database backup
PGPASSWORD="MonDad@2022!" pg_dump -h localhost -U tracker_user consultant_tracker > $BACKUP_DIR/backup_$DATE.sql

# Keep only last 7 days of backups
find $BACKUP_DIR -name "backup_*.sql" -mtime +7 -delete

echo "Database backup completed: backup_$DATE.sql"
🎯 Creating monitoring script...
#!/bin/bash

echo "=== Application Status ==="
pm2 status

echo -e "\n=== Service Status ==="
sudo systemctl status nginx --no-pager -l
sudo systemctl status postgresql --no-pager -l

echo -e "\n=== Disk Usage ==="
df -h

echo -e "\n=== Memory Usage ==="
free -m

echo -e "\n=== Recent Application Logs ==="
pm2 logs consultant-tracker --lines 10 --nostream

echo -e "\n=== Application URL ==="
echo "http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
✅ Deployment completed successfully!

🎯 Application Details:
   URL: http://<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <title>401 - Unauthorized</title>
 </head>
 <body>
  <h1>401 - Unauthorized</h1>
 </body>
</html>
   Database: PostgreSQL running on localhost:5432
   Files stored in: S3 bucket 'consultant-tracker-frontend-app'
   Email reports from: sre.aibot@gmail.com

📊 Management Commands:
   Monitor: ./monitor.sh
   Logs: pm2 logs consultant-tracker
   Restart: pm2 restart consultant-tracker
   Stop: pm2 stop consultant-tracker
   Backup: sudo /usr/local/bin/backup-db.sh

📅 Automated Features:
   ✅ Daily email reports at 7:00 PM EST
   ✅ Weekly email reports every Friday at 7:00 PM EST
   ✅ Monthly email reports on last day of month at 7:00 PM EST
   ✅ Daily database backups at 2:00 AM

🔧 Next Steps:
1. Verify your S3 bucket 'consultant-tracker-frontend-app' exists and is accessible
2. Verify your SES email 'sre.aibot@gmail.com' is verified in AWS SES console
3. Test the application by visiting the URL above
4. Check logs with: pm2 logs consultant-tracker

🚀 Your SVATech Consultant Tracker is now live!
ubuntu@ip-100-20-10-123:~/AugConsultant$ pm2 status

                        -------------

__/\\\\\\\\\\\\\____/\\\\____________/\\\\____/\\\\\\\\\_____
 _\/\\\/////////\\\_\/\\\\\\________/\\\\\\__/\\\///////\\\___
  _\/\\\_______\/\\\_\/\\\//\\\____/\\\//\\\_\///______\//\\\__
   _\/\\\\\\\\\\\\\/__\/\\\\///\\\/\\\/_\/\\\___________/\\\/___
    _\/\\\/////////____\/\\\__\///\\\/___\/\\\________/\\\//_____
     _\/\\\_____________\/\\\____\///_____\/\\\_____/\\\//________
      _\/\\\_____________\/\\\_____________\/\\\___/\\\/___________
       _\/\\\_____________\/\\\_____________\/\\\__/\\\\\\\\\\\\\\\_
        _\///______________\///______________\///__\///////////////__


                          Runtime Edition

        PM2 is a Production Process Manager for Node.js applications
                     with a built-in Load Balancer.

                Start and Daemonize any application:
                $ pm2 start app.js

                Load Balance 4 instances of api.js:
                $ pm2 start api.js -i 4

                Monitor in production:
                $ pm2 monitor

                Make pm2 auto-boot at server restart:
                $ pm2 startup

                To go further checkout:
                http://pm2.io/


                        -------------

[PM2] Spawning PM2 daemon with pm2_home=/home/ubuntu/.pm2
[PM2] PM2 Successfully daemonized
┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘
ubuntu@ip-100-20-10-123:~/AugConsultant$ pm2 logs consultant-tracker --lines 20
[TAILING] Tailing last 20 lines for [consultant-tracker] process (change the value with --lines option)
^C
ubuntu@ip-100-20-10-123:~/AugConsultant$ sudo netstat -tlnp | grep :5000
sudo: netstat: command not found
ubuntu@ip-100-20-10-123:~/AugConsultant$ curl http://localhost:5000
curl: (7) Failed to connect to localhost port 5000 after 0 ms: Couldn't connect to server
ubuntu@ip-100-20-10-123:~/AugConsultant$ sudo tail -f /var/log/nginx/error.log
2025/08/11 17:08:19 [notice] 22815#22815: using inherited sockets from "5;6;"
2025/08/11 17:34:41 [error] 26176#26176: *1 connect() failed (111: Connection refused) while connecting to upstream, client: 152.208.7.167, server: _, request: "GET / HTTP/1.1", upstream: "http://127.0.0.1:5000/", host: "3.87.67.228"
2025/08/11 17:34:48 [error] 26176#26176: *3 connect() failed (111: Connection refused) while connecting to upstream, client: 152.208.7.167, server: _, request: "GET / HTTP/1.1", upstream: "http://127.0.0.1:5000/", host: "3.87.67.228"
2025/08/11 17:34:55 [error] 26176#26176: *5 connect() failed (111: Connection refused) while connecting to upstream, client: 152.208.7.167, server: _, request: "GET / HTTP/1.1", upstream: "http://127.0.0.1:5000/", host: "3.87.67.228"
2025/08/11 17:35:43 [error] 26176#26176: *7 connect() failed (111: Connection refused) while connecting to upstream, client: 152.208.7.167, server: _, request: "GET / HTTP/1.1", upstream: "http://127.0.0.1:5000/", host: "3.87.67.228"
^C
ubuntu@ip-100-20-10-123:~/AugConsultant$ cd /home/ubuntu/AugConsultant

# 1. Check if the built files exist
ls -la dist/

# 2. Delete the failed PM2 process
pm2 delete all

# 3. Start the application directly with the correct command
pm2 start dist/index.js --name "consultant-tracker"

# 4. Check the status and logs
pm2 status
pm2 logs consultant-tracker --lines 20

# 5. Test if the app is now running
curl http://localhost:5000

# 6. Save PM2 configuration
pm2 save
total 116
drwxr-xr-x  3 root   root     4096 Aug 11 17:34 .
drwxrwxr-x 11 ubuntu ubuntu   4096 Aug 11 17:34 ..
-rw-r--r--  1 root   root   104543 Aug 11 17:34 index.js
drwxr-xr-x  3 root   root     4096 Aug 11 17:34 public
[PM2][WARN] No process found
[PM2] Starting /home/ubuntu/AugConsultant/dist/index.js in fork_mode (1 instance)
[PM2] Done.
┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │
├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤
│ 0  │ consultant-tracker │ fork     │ 0    │ online    │ 0%       │ 28.9mb   │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘
┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │
├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤
│ 0  │ consultant-tracker │ fork     │ 0    │ online    │ 50%      │ 58.4mb   │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘
[TAILING] Tailing last 20 lines for [consultant-tracker] process (change the value with --lines option)
/home/ubuntu/.pm2/logs/consultant-tracker-out.log last 20 lines:
/home/ubuntu/.pm2/logs/consultant-tracker-error.log last 20 lines:
0|consultant-tracker  | Error: DATABASE_URL must be set. Did you forget to provision a database?
0|consultant-tracker  |     at file:///home/ubuntu/AugConsultant/dist/index.js:240:9
0|consultant-tracker  |     at ModuleJob.run (node:internal/modules/esm/module_job:263:25)
0|consultant-tracker  |     at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)
